// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
   // Put you code here:
   //whether or not x and y get set to 0
   Mux16(a=x, b=false, sel=zx, out=x1);
   Mux16(a=y, b=false, sel=zy, out=y1);

   //nx and ny seletor logic
   Not16(in=x1, out=Notx1);
   Mux16(a=x1, b=Notx1, sel=nx, out=x2);
   Not16(in=y1, out=Noty1);
   Mux16(a=y1, b=Noty1, sel=ny, out=y2);

   //combining logic with f selector
   And16(a=x2, b=y2, out=XandY);
   Add16(a=x2, b=y2, out=XPlusY);
   Mux16(a=XandY, b=XPlusY, sel=f, out=xy);


   //negating output
   //if out < 0, MSB == 1
   Not16(in=xy, out=NotXY);
   Mux16(a=xy, b=NotXY, sel=no, out[15]=ng, out[0..7]=p1, out[8..15]=p2, out=out);

   //if out == 0, the Or8Ways are false
   Not(in=notzero, out=zr);
   Or(a=or1, b=or2, out=notzero);
   Or8Way(in=p1, out=or1);
   Or8Way(in=p2, out=or2);

}
